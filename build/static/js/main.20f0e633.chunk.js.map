{"version":3,"sources":["PublicPixel.ttf","App.js","reportWebVitals.js","index.js"],"names":["SystemProgram","web3","programID","Keypair","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","baseAccount","setBaseAccount","pixelatedImageURL","setPixelatedImageURL","imageList","setImageList","loading","setLoading","success","setSuccess","failure","setFailure","getBaseAccount","a","console","log","axios","get","then","res","kp","data","arr","Object","values","_keypair","secretKey","secret","Uint8Array","fromSecretKey","catch","error","checkForConnectedWallet","window","solana","isPhantom","connect","onlyIfTrusted","response","publicKey","toString","connectWallet","getWallet","open","focus","getProvider","connection","Connection","Provider","createImageAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getImageList","account","fetch","onDrop","useCallback","acceptedFiles","resetStates","imageFile","type","dropReader","FileReader","readAsDataURL","onload","event","imageAsBase64","target","result","image","document","createElement","src","width","Math","max","floor","height","canvas","context","getContext","alpha","drawImage","imageData","getImageData","y","x","pixelIndex","fillStyle","fillRect","pixImgURL","toDataURL","useDropzone","multiple","minSize","maxSize","accept","getRootProps","getInputProps","isDragAccept","isDragReject","uploadImage","base64","blob","File","lastModified","Date","now","FormData","append","post","location","origin","cid","createImage","uploadFailure","addImage","uploadSuccess","useEffect","onLoad","addEventListener","className","onClick","alt","style","slice","reverse","map","item","index","imageCid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.20f0e633.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/PublicPixel.cdacf559.ttf\";","// ----- Dependencies ----------\n// React app\nimport React, { useEffect, useState, useCallback } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n// File handling\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\n// Solana\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json';\n\n// ----- Constants ----------\n// Solana configuration\nconst { SystemProgram, Keypair } = web3;\nconst programID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl('devnet');\nconst opts = { preflightCommitment: \"finalized\"};\n// Other\nconst getPhantomWalletURL = 'https://phantom.app/';\nconst IPFSGatewayURL = 'https://stevekennedy.mypinata.cloud/ipfs/';\n\nconst App = () => {\n  // ----- States ----------\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [baseAccount, setBaseAccount] = useState(null);\n  const [pixelatedImageURL, setPixelatedImageURL] = useState(null);\n  const [imageList, setImageList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [failure, setFailure] = useState(false);\n\n  // ----- Actions ----------\n  // get Solana base account keypair\n  const getBaseAccount = async () => {\n    console.log(\"Attempting to get base account...\");\n    axios.get('/keypair')\n      .then((res) => {\n        console.log(\"Base account request completed:\", res);\n        const kp = res.data;\n        const arr = Object.values(kp._keypair.secretKey);\n        const secret = new Uint8Array(arr);\n        const baseAccount = web3.Keypair.fromSecretKey(secret);\n        setBaseAccount(baseAccount);\n      }).catch((error) => {\n        console.log(\"Failed to get Base Account:\", error);\n        setBaseAccount(null);\n        // TODO handle error\n      })\n  };\n\n  // determine whether a Phatom wallet is connected\n  const checkForConnectedWallet = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) { // Phantom wallet found\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log('Connected with public key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {  // Phantom wallet not found\n          console.log('Phantom wallet not found. Please get a Phantom wallet from https://phantom.app');\n      }\n    } catch (error) {  // Other error\n          console.log('Wallet connection check failed', error);\n      }\n  };\n\n  // connect Phantom wallet\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with public key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const getWallet = async () => {\n    window.open(getPhantomWalletURL, '_blank').focus();\n  };\n  \n  // setup authenticated solana connection. requires connected wallet\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  };\n\n  // initialize Solana base account\n  const createImageAccount = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"Creating new image account...\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getImageList();\n\n    } catch (error) {\n      console.log(\"Error creating BaseAccount:\", error);\n    };\n  };\n\n  // get images from Solana\n  const getImageList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Connected to base account:\", account);\n      setImageList(account.imageList);\n    } catch (error) {\n      console.log(\"Error in fetching image list:\", error);\n      setImageList(null);\n    };\n  };\n\n  // handle file drop to Dropzone\n  const onDrop = useCallback((acceptedFiles) => {\n    resetStates();\n    \n    const imageFile = acceptedFiles[0];\n    console.log(\"Image file is: \", imageFile);\n    const { type: mimeType } = imageFile;\n\n    const dropReader = new FileReader();\n    dropReader.readAsDataURL(imageFile);\n    dropReader.onload = (event) => {\n      const imageAsBase64 = event.target.result;\n      console.log(\"Image as base64 is: \", imageAsBase64);\n\n      const image = document.createElement('img');\n      image.src = imageAsBase64;\n\n      image.onload = () => {\n        const width = Math.max(1, Math.floor(image.width));\n        const height = Math.max(1, Math.floor(image.height));\n          \n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        console.log(\"Canvas dimensions are:\", width, height);\n        const pixelationFactor = 10;\n  \n        const context = canvas.getContext('2d', { alpha: false });\n        context.drawImage(image, 0, 0, width, height);\n        const imageData = context.getImageData(0, 0, width, height).data;\n  \n        for (let y = 0; y < height; y += pixelationFactor) {\n          for (let x = 0; x < width; x += pixelationFactor) {\n            const pixelIndex = (x + y * width) * 4;\n            context.fillStyle = `rgba(\n              ${imageData[pixelIndex]},\n              ${imageData[pixelIndex + 1]},\n              ${imageData[pixelIndex + 2]},\n              ${imageData[pixelIndex + 3]}\n            )`;\n            context.fillRect(x, y, pixelationFactor, pixelationFactor);\n          }\n        }\n\n        const pixImgURL = canvas.toDataURL(\"image/png\");\n        setPixelatedImageURL(pixImgURL);\n      }\n    }\n  }, []);\n\n  // configure dropzone\n  const {\n    getRootProps,\n    getInputProps,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    onDrop,\n    multiple: false,\n    minSize: 0,\n    maxSize: 5245880,\n    accept: 'image/*'\n  });\n\n  // handle image upload\n  const uploadImage = async () => {\n    console.log(\"User pressed the submit button...\");\n    setLoading(true);\n    \n    const base64 = await fetch(pixelatedImageURL);\n    const blob = await base64.blob();\n    const imageFile = new File([blob], \"file.png\", {lastModified: Date.now(), type: \"image/png\"} );\n\n    const data = new FormData();\n    data.append(\"file\", imageFile, \"file.png\");\n    console.log(\"File for upload is:\", imageFile);\n\n    axios.post(`${window.location.origin.toString()}/upload`, data, {})\n      .then((res) => {\n        console.log(\"File sucessfully uploaded to IPFS server\", res)\n\n        const cid = res.data;\n        console.log(\"Adding image to Solana with CID:\", cid);\n        createImage(cid);\n  \n    }).catch((error) => {\n        console.log(\"Error uploading file to server:\", error);\n        uploadFailure();\n    });\n  };\n\n  // send cid to Solana program and store image object\n  const createImage = async (cid) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addImage(cid, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Image successfully sent to Solana program\", cid);\n      await getImageList();\n      await uploadSuccess();\n\n    } catch (error) {\n      console.log(\"Error sending image to Solana program:\", error);\n      await uploadFailure();\n    }\n  }\n\n  // image upload success, reset states\n  const uploadSuccess = async () => {\n    setSuccess(true);\n    setFailure(false);\n\n    setLoading(false);\n    setPixelatedImageURL(null);\n  }\n\n  // image upload failure, reset states\n  const uploadFailure = async () => {\n    setSuccess(false);\n    setFailure(true);\n\n    setLoading(false);\n    setPixelatedImageURL(null);\n  }\n\n  // reset states\n  const resetStates = async () => {\n    setSuccess(false);\n    setFailure(false);\n    setLoading(false);\n    setPixelatedImageURL(null);\n  }\n\n  // ----- UI Renders ----------\n  // bouncing dots loader\n  const dotLoader = () => {\n    return (\n      <div className=\"dot-loader\">\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    );\n  };\n\n  // render success message\n  const renderUploadSuccess = () => (\n    <p className=\"success-text\">\n      Image pixelated successfully!\n    </p>\n  );\n\n  // render failure message\n  const renderUploadFailure = () => (\n    <p className=\"failure-text\">\n      Image pixelation failed! Please try again.\n    </p>\n  );\n\n  // render UI for when user hasn't connected wallet yet\n  const renderNotConnectedContainer = () => (\n    <div className=\"header-container\">\n      <div>\n        <button className=\"cta-button connect-wallet-button\" onClick={connectWallet}>\n          Connect Phantom Wallet\n        </button>\n      </div>\n      <div>\n        <button className=\"cta-button get-wallet-button\" onClick={getWallet}>\n          Get Phantom Wallet\n        </button>\n      </div>\n    </div>\n  );\n  \n  // render UI for when user has connected wallet\n  const renderConnectedContainer = () => {\n    // program account hasn't been initialized, display create account button\n    if (imageList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-image-button\" onClick={createImageAccount}>\n                One-Time Initialization for Image Program Account\n          </button>\n        </div>\n      )\n    } \n    \n    // program account exists, display upload field and image list\n    else {\n      return(\n        <div className=\"connected-container\">\n        { success && renderUploadSuccess()}\n        { failure && renderUploadFailure()}\n        \n        {\n          pixelatedImageURL? (\n            <div className=\"image-preview\">\n              <img src={pixelatedImageURL} alt={\"Preview of your pixelated image.\"} style={{height: \"80%\"}}></img>\n              <div>\n              <button className=\"cta-button submit-image-button\" onClick={uploadImage}>\n                { loading? (\n                  dotLoader()\n                ) : (\n                  \"Submit\"\n                )}\n              </button>\n              </div>\n            </div>\n          ) : (\n            <div \n              {...getRootProps({\n                className:`dropzone\n                ${isDragAccept && 'dropzone-accept'}\n                ${isDragReject && 'dropzone-reject'}`,\n              })}>\n            <input {...getInputProps()} />\n              { isDragReject? (\n                <p>Image files only!</p>\n              ) : (\n                <p>Drag and drop image to preview</p>\n              )}\n            </div>\n          )\n        }\n\n        <div className=\"authed-container\">\n          <p className=\"image-header-text\">\n            Latest Pixels\n          </p>\n        </div>\n\n        <div className=\"image-grid\">\n          {imageList.slice(0).reverse().map((item, index) => (\n            <div className=\"image-item\" key={index}>\n              <img src={`${IPFSGatewayURL + item.imageCid}`} alt={\"\"}  />\n              {console.log(\"Image is:\", index, item)}\n            </div>\n          ))}\n        </div>\n      </div>\n      )\n    }\n  };\n  \n  // ----- Use Effects ----------\n  // request base account from server\n  useEffect(() => {\n    if (!baseAccount) {\n      console.log(\"Fetching base account...\")\n      getBaseAccount();\n    }\n  }, []);\n  \n  // check for connected Phantom wallet - must be once page fully loaded\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkForConnectedWallet();\n    };\n    window.addEventListener('load', onLoad);\n  }, []);\n\n  // get image list from Solana program\n  useEffect(() => {\n    if (walletAddress && baseAccount) {\n      console.log(\"Fetching image list...\");\n      getImageList();\n    }\n  }, [walletAddress, baseAccount]);\n\n  // ----- Load App ----------\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header-text\">\n            Pixelate\n          </p>\n          <p className=\"sub-text\">\n            Turn your favorite images into pixel art:\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n        </div>\n      </div>\n    </div>\n  );\n};\n  \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport './PublicPixel.ttf';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}