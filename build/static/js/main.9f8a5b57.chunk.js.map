{"version":3,"sources":["PublicPixel.ttf","App.js","reportWebVitals.js","index.js"],"names":["SystemProgram","web3","baseAccount","Keypair","generate","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","setPhantomWalletExists","walletAddress","setWalletAddress","pixelatedImageURL","setPixelatedImageURL","imageList","setImageList","checkForConnectedWallet","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","connectWallet","getProvider","connection","Connection","Provider","createImageAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getImageList","account","fetch","onDrop","useCallback","acceptedFiles","imageFile","type","dropReader","FileReader","readAsDataURL","onload","event","imageAsBase64","target","result","image","document","createElement","src","width","Math","max","floor","height","canvas","context","getContext","alpha","drawImage","imageData","getImageData","data","y","x","pixelIndex","fillStyle","fillRect","pixImgURL","toDataURL","useDropzone","multiple","minSize","maxSize","accept","getRootProps","getInputProps","isDragAccept","isDragReject","uploadImage","base64","blob","File","lastModified","Date","now","FormData","append","axios","post","location","origin","then","res","cid","createImage","catch","error","addImage","useEffect","onLoad","addEventListener","className","onClick","alt","style","map","item","index","imageCid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9f8a5b57.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/PublicPixel.cdacf559.ttf\";","// ----- Dependencies ----------\n// React app\nimport React, { useEffect, useState, useCallback } from 'react';\nimport './App.css';\n// File handling\nimport { useDropzone } from 'react-dropzone';\nimport axios from 'axios';\n// Solana\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json';\n\n// ----- Constants ----------\n// Test environment\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n];\n// Solana configuration\nconst { SystemProgram, Keypair } = web3;\nlet baseAccount = Keypair.generate();\nconst programID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl('devnet');\nconst opts = { preflightCommitment: \"finalized\"};\n// Image configuration\nconst pixelationFactor = 5;\n// Other\nconst getPhantomWalletURL = 'https://phantom.app/';\n\nconst App = () => {\n  // ----- States ----------\n  const [phantomWalletExists, setPhantomWalletExists] = useState(null);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [pixelatedImageURL, setPixelatedImageURL] = useState(null);\n  const [imageList, setImageList] = useState([]);\n\n  // ----- Actions ----------\n  \n  // determine whether a Phatom wallet is connected\n  const checkForConnectedWallet = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) { // Phantom wallet found\n          setPhantomWalletExists(true);\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log('Connected with public key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {  // Phantom wallet not found\n          console.log('Phantom wallet not found. Please get a Phantom wallet from https://phantom.app');\n      }\n    } catch (error) {  // Other error\n          console.log('Wallet connection check failed', error);\n      }\n  };\n\n  // connect Phantom wallet\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with public key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const getWallet = async () => {\n    window.open(getPhantomWalletURL, '_blank').focus();\n  };\n  \n  // setup authenticated solana connection. requires connected wallet\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  };\n\n  // initialize Solana base account\n  const createImageAccount = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"Creating new image account...\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getImageList();\n\n    } catch (error) {\n      console.log(\"Error creating BaseAccount:\", error);\n    };\n  };\n\n  // get images from Solana\n  const getImageList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Connected to base account:\", account);\n      setImageList(account.imageList);\n    } catch (error) {\n      console.log(\"Error in fetching image list:\", error);\n      setImageList(null);\n    };\n  };\n\n  // handle file drop to Dropzone\n  const onDrop = useCallback((acceptedFiles) => {\n    \n    const imageFile = acceptedFiles[0];\n    console.log(\"Image file is: \", imageFile);\n    const { type: mimeType } = imageFile;\n\n    const dropReader = new FileReader();\n    dropReader.readAsDataURL(imageFile);\n    dropReader.onload = (event) => {\n      const imageAsBase64 = event.target.result;\n      console.log(\"Image as base64 is: \", imageAsBase64);\n\n      const image = document.createElement('img');\n      image.src = imageAsBase64;\n\n      image.onload = () => {\n        const width = Math.max(1, Math.floor(image.width));\n        const height = Math.max(1, Math.floor(image.height));\n          \n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        console.log(\"Canvas dimensions are:\", width, height);\n  \n        const context = canvas.getContext('2d', { alpha: false });\n        context.drawImage(image, 0, 0, width, height);\n        const imageData = context.getImageData(0, 0, width, height).data;\n  \n        for (let y = 0; y < height; y += pixelationFactor) {\n          for (let x = 0; x < width; x += pixelationFactor) {\n            const pixelIndex = (x + y * width) * 4;\n            context.fillStyle = `rgba(\n              ${imageData[pixelIndex]},\n              ${imageData[pixelIndex + 1]},\n              ${imageData[pixelIndex + 2]},\n              ${imageData[pixelIndex + 3]}\n            )`;\n            context.fillRect(x, y, pixelationFactor, pixelationFactor);\n          }\n        }\n\n        const pixImgURL = canvas.toDataURL(\"image/png\");\n        setPixelatedImageURL(pixImgURL);\n      }\n    }\n  }, []);\n\n  // configure dropzone\n  const {\n    getRootProps,\n    getInputProps,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    onDrop,\n    multiple: false,\n    minSize: 0,\n    maxSize: 5245880,\n    accept: 'image/*'\n  });\n\n  // handle image upload\n  const uploadImage = async () => {\n    console.log(\"User pressed the submit button...\");\n    \n    const base64 = await fetch(pixelatedImageURL);\n    const blob = await base64.blob();\n    const imageFile = new File([blob], \"file.png\", {lastModified: Date.now(), type: \"image/png\"} );\n\n    const data = new FormData();\n    data.append(\"file\", imageFile, \"file.png\");\n    console.log(\"File for upload is:\", imageFile);\n\n    axios.post(`${window.location.origin.toString()}/upload`, data, {})\n      .then((res) => {\n        console.log(\"File sucessfully uploaded to IPFS server\", res)\n\n        const cid = res.data;\n        console.log(\"Adding image to Solana with CID:\", cid);\n        createImage(cid);\n    \n    }).catch((error) => {\n        console.log(\"Error uploading file to server:\", error);\n        // TODO handle error\n    });\n  };\n\n  // send cid to Solana program and store image object\n  const createImage = async (cid) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addImage(cid, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Image successfully sent to Solana program\", cid);\n      await getImageList();\n\n      console.log(\"First image in list is\", imageList[0].cid);\n\n    } catch (error) {\n      console.log(\"Error sending image to Solana program:\", error);\n      // TODO handle error\n    }\n  }\n\n  // ----- UI Renders ----------\n  \n  const loadImgURL = async (cid, mime) => {\n    if (cid === \"\" || cid === null || cid === undefined) {\n      return;\n    }\n    const ipfs = null;\n    for await (const file of ipfs.get(cid)) {\n      const content = [];\n      if (file.content) {\n        for await(const chunk of file.content) {\n          content.push(chunk);\n        }\n        return URL.createObjectURL(new Blob(content, {type: mime}));\n      }\n    }\n  }\n\n  // TODO render UI for when user doesn't have a Phantom wallet\n  const renderNoWalletContainer = () => (\n    <button className=\"cta-button get-wallet-button\" onClick={getWallet}>\n      Get Phantom Wallet\n    </button>\n  );\n  \n  // render UI for when user hasn't connected wallet yet\n  const renderNotConnectedContainer = () => (\n    <button className=\"cta-button connect-wallet-button\" onClick={connectWallet}>\n      Connect Phantom Wallet\n    </button>\n  );\n  \n  // render UI for when user has connected wallet\n  const renderConnectedContainer = () => {\n    // program account hasn't been initialized, display create account button\n    if (imageList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-image-button\" onClick={createImageAccount}>\n                One-Time Initialization for Image Program Account\n          </button>\n        </div>\n      )\n    } \n    \n    // program account exists, display upload field and image list\n    else {\n      return(\n        <div className=\"connected-container\">\n        {\n          pixelatedImageURL? (\n            <div className=\"image-preview\">\n              <img src={pixelatedImageURL} alt={\"Preview of your pixelated image.\"} style={{height: \"80%\"}}></img>\n              <div>\n              <button className=\"cta-button submit-image-button\" onClick={uploadImage}>\n                Submit\n              </button>\n              </div>\n            </div>\n          ) : (\n            <div \n              {...getRootProps({\n                className:`dropzone\n                ${isDragAccept && 'dropzone-accept'}\n                ${isDragReject && 'dropzone-reject'}`,\n              })}>\n            <input {...getInputProps()} />\n              { isDragReject? (\n                <p>Image files only!</p>\n              ) : (\n                <p>Drag and drop image to preview</p>\n              )}\n            </div>\n          )\n        }\n  \n        <div className=\"image-grid\">\n          \n          {imageList.map((item, index) => (\n            <div className=\"image-item\" key={index}>\n              <img src={`https://ipfs.io/ipfs/${item.imageCid}`} alt={\"\"} />\n            </div>\n          ))}\n        </div>\n      </div>\n      )\n    }\n  };\n  \n  // ----- Use Effects ----------\n\n  // check for connected Phantom wallet - must be once page fully loaded\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkForConnectedWallet();\n    };\n    window.addEventListener('load', onLoad);\n  }, []);\n  // get image list from Solana program\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching image list...\");\n      getImageList();\n    }\n  }, [walletAddress]);\n\n  // ----- Load App ----------\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Pixelate</p>\n          <p className=\"sub-text\">\n            Pixelate an image and store on Solana:\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n        </div>\n      </div>\n    </div>\n  );\n};\n  \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport './PublicPixel.ttf';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}